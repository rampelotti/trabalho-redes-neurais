import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Carregar o dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt"
columns = ["Variance", "Skewness", "Curtosis", "Entropy", "Class"]
data = pd.read_csv(url, header=None, names=columns)

# Dividir o dataset em características (X) e rótulos (y)
X = data.drop("Class", axis=1)
y = data["Class"]

# Dividir o dataset em treino e teste com as proporções solicitadas
train_class_1 = X[y == 1]
train_class_0 = X[y == 0]

# Selecionar 70% da classe 1 e 10% da classe 0
train_class_1 = train_class_1.sample(frac=0.7, random_state=42)
train_class_0 = train_class_0.sample(frac=0.1, random_state=42)

# Combinar os dados de treino
X_train = pd.concat([train_class_1, train_class_0])
y_train = pd.concat([y.loc[train_class_1.index], y.loc[train_class_0.index]])

# Dividir o restante para o conjunto de teste (30% da classe 1 e 30% da classe 0)
test_class_1 = X[y == 1].drop(train_class_1.index)
test_class_0 = X[y == 0].drop(train_class_0.index)

test_class_1 = test_class_1.sample(frac=0.3, random_state=42)
test_class_0 = test_class_0.sample(frac=0.3, random_state=42)

# Combinar os dados de teste
X_test = pd.concat([test_class_1, test_class_0])
y_test = pd.concat([y.loc[test_class_1.index], y.loc[test_class_0.index]])

# Normalizar os dados
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Salvar os dados pré-processados em arquivos CSV
X_train_scaled_df = pd.DataFrame(X_train_scaled)
X_train_scaled_df.to_csv('X_train_scaled.csv', index=False, header=False, sep=" ", float_format="%.4f")

y_train_df = pd.DataFrame(y_train)
y_train_df.to_csv('x_train.csv', index=False, header=False, sep=" ")

X_test_scaled_df = pd.DataFrame(X_test_scaled)
X_test_scaled_df.to_csv('X_test_scaled.csv', index=False, header=False, sep=" ", float_format="%.4f")

y_test_df = pd.DataFrame(y_test)
y_test_df.to_csv('y_test.csv', index=False, header=False, sep=" ")

print("Arquivos de treino e teste gerados com sucesso.")
